import React, { useState } from "react";
import { useMutation } from "@tanstack/react-query";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { IconMap } from "@/lib/icon-map";
import { Bug, Download, Copy, AlertCircle, Loader2, FileWarning } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { apiRequest } from "@/lib/queryClient";
import { exportToJson, exportToCsv, severityBadgeColors } from "@/lib/utils/scan-utils";
import { z } from "zod";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Separator } from "@/components/ui/separator";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { VulnerabilityResult } from "@/lib/types";
import { Severity } from "@shared/schema";

const formSchema = z.object({
  url: z
    .string()
    .min(3, "URL must be at least 3 characters")
    .url("Please enter a valid URL (e.g., https://example.com)"),
});

type FormValues = z.infer<typeof formSchema>;

export default function VulnerabilityScanner() {
  const { toast } = useToast();
  const [vulnerabilities, setVulnerabilities] = useState<VulnerabilityResult[]>([]);
  const [noResults, setNoResults] = useState(false);

  const form = useForm<FormValues>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      url: "",
    },
  });

  const { mutate: scanVulnerabilities, isPending } = useMutation({
    mutationFn: async (values: FormValues) => {
      const res = await apiRequest("POST", "/api/tools/vulnerability-scan", values);
      return res.json();
    },
    onSuccess: (data) => {
      if (data.vulnerabilities.length === 0) {
        setNoResults(true);
        setVulnerabilities([]);
        toast({
          title: "No Vulnerabilities Found",
          description: "No vulnerabilities were detected for this URL.",
          variant: "default",
        });
      } else {
        setNoResults(false);
        setVulnerabilities(data.vulnerabilities);
        toast({
          title: "Scan Complete",
          description: `Found ${data.vulnerabilities.length} vulnerabilities.`,
          variant: "default",
        });
      }
    },
    onError: (error) => {
      toast({
        title: "Error",
        description: `Failed to scan for vulnerabilities: ${error.message}`,
        variant: "destructive",
      });
    },
  });

  const onSubmit = (data: FormValues) => {
    setNoResults(false);
    scanVulnerabilities(data);
  };

  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text).then(() => {
      toast({
        title: "Copied",
        description: "Results copied to clipboard",
        variant: "default",
      });
    });
  };
  
  const copyVulnerableUrl = (url: string) => {
    navigator.clipboard.writeText(url).then(() => {
      toast({
        title: "URL Copied",
        description: "Vulnerable URL copied to clipboard",
        variant: "default",
      });
    });
  };

  const handleExportJSON = () => {
    if (vulnerabilities.length === 0) return;
    
    const url = form.getValues("url");
    const data = {
      url,
      vulnerabilities,
      timestamp: new Date().toISOString(),
    };
    
    exportToJson(data, `vulnerabilities-${new URL(url).hostname}-${new Date().toISOString().split('T')[0]}.json`);
    
    toast({
      title: "Exported",
      description: "Results exported as JSON",
      variant: "default",
    });
  };

  const handleExportCSV = () => {
    if (vulnerabilities.length === 0) return;
    
    const url = form.getValues("url");
    
    exportToCsv(vulnerabilities, `vulnerabilities-${new URL(url).hostname}-${new Date().toISOString().split('T')[0]}.csv`);
    
    toast({
      title: "Exported",
      description: "Results exported as CSV",
      variant: "default",
    });
  };

  return (
    <div className="px-4 py-6 md:px-6 lg:px-8">
      <div className="flex flex-col md:flex-row md:items-center justify-between pb-6">
        <div className="flex items-center space-x-2">
          <div className="p-2 rounded-lg bg-red-500/10">
            <Bug className="h-5 w-5 text-red-500" />
          </div>
          <div>
            <h2 className="text-2xl font-bold text-white">Vulnerability Scanner</h2>
            <p className="text-slate-400 mt-1">Detect security vulnerabilities in web applications</p>
          </div>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <Card className="lg:col-span-1 bg-slate-800 border-slate-700">
          <CardHeader>
            <CardTitle className="text-lg font-semibold text-white">Target Input</CardTitle>
            <CardDescription className="text-slate-400">
              Enter a URL to scan for vulnerabilities
            </CardDescription>
          </CardHeader>
          <CardContent>
            <Form {...form}>
              <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
                <FormField
                  control={form.control}
                  name="url"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel className="text-sm font-medium text-slate-300">Target URL</FormLabel>
                      <FormControl>
                        <Input
                          className="bg-slate-900 border-slate-700 text-white focus:border-red-500 focus:ring-red-500"
                          placeholder="https://example.com"
                          {...field}
                        />
                      </FormControl>
                      <FormMessage className="text-red-500" />
                    </FormItem>
                  )}
                />
                <Button 
                  type="submit" 
                  className="w-full bg-red-500 text-white hover:bg-red-600"
                  disabled={isPending}
                >
                  {isPending ? (
                    <>
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                      Scanning...
                    </>
                  ) : (
                    <>
                      <Bug className="mr-2 h-4 w-4" />
                      Scan for Vulnerabilities
                    </>
                  )}
                </Button>
              </form>
            </Form>

            <Separator className="my-6 bg-slate-700" />

            <div className="space-y-4">
              <h4 className="text-sm font-medium text-slate-300">Export Options</h4>
              <div className="flex space-x-2">
                <Button
                  variant="outline"
                  className="flex-1 bg-slate-900 border-slate-700 text-slate-300 hover:bg-slate-700 hover:text-white"
                  onClick={handleExportJSON}
                  disabled={vulnerabilities.length === 0}
                >
                  <Download className="mr-2 h-4 w-4" />
                  JSON
                </Button>
                <Button
                  variant="outline"
                  className="flex-1 bg-slate-900 border-slate-700 text-slate-300 hover:bg-slate-700 hover:text-white"
                  onClick={handleExportCSV}
                  disabled={vulnerabilities.length === 0}
                >
                  <Download className="mr-2 h-4 w-4" />
                  CSV
                </Button>
                <Button
                  variant="outline"
                  className="flex-1 bg-slate-900 border-slate-700 text-slate-300 hover:bg-slate-700 hover:text-white"
                  onClick={() => copyToClipboard(JSON.stringify(vulnerabilities, null, 2))}
                  disabled={vulnerabilities.length === 0}
                >
                  <Copy className="mr-2 h-4 w-4" />
                  Copy
                </Button>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card className="lg:col-span-2 bg-slate-800 border-slate-700">
          <CardHeader>
            <CardTitle className="text-lg font-semibold text-white">
              Results
              {vulnerabilities.length > 0 && (
                <Badge className="ml-2 bg-red-500 text-white">{vulnerabilities.length}</Badge>
              )}
            </CardTitle>
            <CardDescription className="text-slate-400">
              Detected vulnerabilities in the target application
            </CardDescription>
          </CardHeader>
          <CardContent>
            {isPending ? (
              <div className="flex items-center justify-center h-64">
                <Loader2 className="h-8 w-8 animate-spin text-red-500" />
                <span className="ml-2 text-slate-400">Scanning for vulnerabilities...</span>
              </div>
            ) : noResults ? (
              <Alert className="bg-green-500/10 border-green-500/20 text-green-500">
                <FileWarning className="h-4 w-4" />
                <AlertTitle>No Vulnerabilities Found</AlertTitle>
                <AlertDescription>
                  No vulnerabilities were detected for the target URL. Good job!
                </AlertDescription>
              </Alert>
            ) : vulnerabilities.length > 0 ? (
              <div className="space-y-4">
                {vulnerabilities.map((vuln, index) => (
                  <div 
                    key={index} 
                    className={`p-4 rounded-md border ${severityBadgeColors[vuln.severity].bg} border-${vuln.severity === 'critical' ? 'red' : vuln.severity === 'high' ? 'amber' : vuln.severity === 'medium' ? 'yellow' : 'green'}-500/20`}
                  >
                    <div className="flex items-start justify-between">
                      <div>
                        <div className="flex items-center">
                          <h4 className="font-medium text-white">{vuln.type}</h4>
                          <Badge className={`ml-2 ${severityBadgeColors[vuln.severity].bg} ${severityBadgeColors[vuln.severity].text}`}>
                            {vuln.severity.charAt(0).toUpperCase() + vuln.severity.slice(1)}
                          </Badge>
                        </div>
                        <p className="mt-2 text-sm text-slate-300">{vuln.description}</p>
                      </div>
                      <Button
                        variant="ghost"
                        size="icon"
                        className="text-slate-400 hover:text-white hover:bg-slate-700"
                        onClick={() => copyToClipboard(JSON.stringify(vuln, null, 2))}
                      >
                        <Copy className="h-4 w-4" />
                      </Button>
                    </div>
                  </div>
                ))}
              </div>
            ) : (
              <div className="flex flex-col items-center justify-center h-64 text-center">
                <IconMap name="vulnerability" className="text-slate-500 mb-2" size={40} />
                <p className="text-slate-400">Enter a URL and start scanning to find vulnerabilities</p>
              </div>
            )}
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
